// https://contest.yandex.ru/contest/25597/run-report/68967337/


/*
-- ПРИНЦИП РАБОТЫ --
Для решения я воспользовался динамическим программированием.

Я вдохновился идеей решения из статьи https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5_%D0%9B%D0%B5%D0%B2%D0%B5%D0%BD%D1%88%D1%82%D0%B5%D0%B9%D0%BD%D0%B0

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Рассмотрим формулу более подробно. 
Очевидно, что редакционное расстояние между двумя пустыми строками равно нулю. 
Так же очевидно то, что чтобы получить пустую строку из строки длиной i, 
нужно совершить i операций удаления, 
а чтобы получить строку длиной j из пустой, нужно произвести j операций вставки.

Осталось рассмотреть нетривиальный случай, когда обе строки непусты.

Для начала заметим, что в оптимальной последовательности операций их можно произвольно менять местами. 
В самом деле, рассмотрим две последовательные операции:

Две замены одного и того же символа — неоптимально (если мы заменили x на y, 
потом — y на z, выгоднее было сразу заменить x на z).
Две замены разных символов можно менять местами
Два стирания или две вставки можно менять местами
Вставка символа с его последующим стиранием — неоптимально (можно их обе отменить)
Стирание и вставку разных символов можно менять местами
Вставка символа с его последующей заменой — неоптимально (излишняя замена)
Вставка символа и замена другого символа меняются местами
Замена символа с его последующим стиранием — неоптимально (излишняя замена)
Стирание символа и замена другого символа меняются местами
Пусть кончается на символ «a», S2 кончается на символ «b». Есть три варианта:

Символ «а», на который кончается S1, в какой-то момент был стёрт. Сделаем это стирание первой операцией. 
Тогда мы стёрли символ «a», после чего превратили первые i-1 символов S1 в S2 (на что потребовалось D(i-1,j) операций), 
значит, всего потребовалось D(i-1,j)+1 операций
Символ «b», на который кончается S2, в какой-то момент был добавлен. 
Сделаем это добавление последней операцией. Мы превратили S1 в первые j-1 символов S2, 
после чего добавили «b». 
Аналогично предыдущему случаю, потребовалось D(i,j-1)+1 операций.
Оба предыдущих утверждения неверны. 
Если мы добавляли символы справа от финального «a», то, чтобы сделать последним символом «b», 
мы должны были или в какой-то момент добавить его (но тогда утверждение 2 было бы верно), 
либо заменить на него один из этих добавленных символов (что тоже невозможно, 
потому что добавление символа с его последующей заменой неоптимально). 
Значит, символов справа от финального «a» мы не добавляли. 
Самого финального «a» мы не стирали, поскольку утверждение 1 неверно. 
Значит, единственный способ изменения последнего символа — его замена. 
Заменять его 2 или больше раз неоптимально. Значит,
Если a=b, мы последний символ не меняли. 
Поскольку мы его также не стирали и не приписывали ничего справа от него, он не влиял на наши действия, и, 
значит, мы выполнили D(i-1,j-1) операций.
Если a!=b, мы последний символ меняли один раз. Сделаем эту замену первой. 
В дальнейшем, аналогично предыдущему случаю, мы должны выполнить D(i-1,j-1) операций, 
значит, всего потребуется D(i-1,j-1)+1 операций.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
O(mn), где m, n - длины строк.

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
O(mn), где m, n - длины строк.

*/


using System;

namespace A_LevenshteinDistance
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string s1 = Console.ReadLine();
            string s2 = Console.ReadLine();

            var result = GetLevenshteinDistance(s1, s2);

            Console.WriteLine(result);
        }

        public static int GetLevenshteinDistance(string s1, string s2)
        {
            int n = s1.Length;
            int m = s2.Length;
            int[,] dp = new int[n + 1, m + 1];

            for (int i = 0; i <= n; i++)
            {
                for (int j = 0; j <= m; j++)
                {
                    if (i == 0 && j == 0)
                    {
                        dp[i, j] = 0;
                    }
                    else if (j == 0)
                    {
                        dp[i, j] = i;
                    }
                    else if (i == 0)
                    {
                        dp[i, j] = j;
                    }
                    else
                    {
                        int temp = Math.Min(dp[i, j - 1], dp[i - 1, j]);
                        dp[i, j] = Math.Min(temp + 1, dp[i - 1, j - 1] + (s1[i - 1] == s2[j - 1] ? 0 : 1));
                    }
                }
            }

            return dp[n, m];
        }
    }
}
